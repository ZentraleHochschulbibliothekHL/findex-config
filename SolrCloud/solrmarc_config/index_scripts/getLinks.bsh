/**
 * Custom full text retrieval script.
 *
 * This can be used to override built-in SolrMarc custom functions.  If you change
 * this script, you will need to activate it in import/marc_local.properties before
 * it will be applied during indexing.
 */
import org.marc4j.marc.Record;
import org.marc4j.marc.DataField;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.Subfield;
import java.util.regex.Pattern;
import java.io.*;

// JDBC
import java.sql.*;
import com.mchange.v2.c3p0.*;

// set up connection pool for database
ComboPooledDataSource cpds = new ComboPooledDataSource();
cpds.setDriverClass("com.mysql.jdbc.Driver"); //loads the jdbc driver            
cpds.setJdbcUrl( "jdbc:mysql://localhost/links" );
cpds.setUser("solr");                                  
cpds.setPassword("s0lR"); 

// define the base level indexer so that its methods can be called from the script.
// note that the SolrIndexer code will set this value before the script methods are called.
org.solrmarc.index.SolrIndexer indexer = null;

/**
 * Extract full-text from the documents referenced in the tags
 *
 * @param Record record
 * @param String field spec to search for URLs
 * @param String only harvest files matching this extension (null for all)
 * @return String The full-text
 */
Set getLinks(Record record, String fieldSpec, String extension) {
    Set result = new LinkedHashSet();
    String url = "";
    String type = "";
    String ppn = ((ControlField)record.getVariableField("001")).getData().trim();

    // Loop through the specified MARC fields:
    List fields = record.getVariableFields(fieldSpec);

    if (fields != null) {
        try {
            Connection conn = cpds.getConnection();
            PreparedStatement ps = conn.prepareStatement("INSERT IGNORE INTO links (ppn, url, type) VALUES (?, ?, ?);");

            Iterator fieldsIter = fields.iterator();
            while(fieldsIter.hasNext()) {
                field = (DataField)fieldsIter.next();
                urlf = field.getSubfield('u');
                if (urlf != null) {
                    url = urlf.getData().trim();
                    typef = field.getSubfield('3');
                    if (typef != null) {
                        type = typef.getData().trim();
                    } else {
                        type = null;
                    }

                    ps.setString(1, ppn);
                    ps.setString(2, url);
                    ps.setString(3, type);
                    ps.addBatch();
               }
           }
           conn.setAutoCommit(false); 
           ps.executeBatch();
           conn.setAutoCommit(true);
           ps.close();
           conn.close();
        } catch (Exception e) {
        }
    }
    // return string to SolrMarc
    return null;
}

/**
 * Extract full-text from the documents referenced in the tags
 *
 * @param Record record
 * @param String field spec to search for URLs
 * @return String The full-text
 */
Set getLinks(Record record, String fieldSpec) {
    return getLinks(record, fieldSpec, null);
}

/**
 * Extract full-text from the documents referenced in the tags
 *
 * @param Record record
 * @return String The full-text
 */
Set getLinks(Record record) {
    return getLinks(record, "856", null);
}
